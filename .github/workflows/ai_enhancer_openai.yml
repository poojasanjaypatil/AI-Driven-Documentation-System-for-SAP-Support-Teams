name: AI Enhance (OpenAI gpt-4o-mini)

on:
  push:
    branches: [ main ]
    paths: [ 'ai_jobs/openai_incoming/*.json' ]   # <â€” separate folder so it won't collide with Groq

permissions:
  contents: write

jobs:
  enhance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Find incoming job file
        id: find
        run: |
          FILE=$(git diff --name-only HEAD^ HEAD | grep -E '^ai_jobs/openai_incoming/.*\.json$' | head -n 1)
          echo "job_file=$FILE" >> $GITHUB_OUTPUT
          echo "base=$(basename "$FILE")" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Call OpenAI (gpt-4o-mini) and write result
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - << 'PY'
          import json, os, pathlib
          from openai import OpenAI

          job_path = pathlib.Path("${{ steps.find.outputs.job_file }}")
          out_path = pathlib.Path("ai_jobs/openai_outgoing") / job_path.name
          out_path.parent.mkdir(parents=True, exist_ok=True)

          job = json.loads(job_path.read_text(encoding="utf-8"))

          system = "You are a senior SAP/ServiceNow support writer. Return STRICT JSON with keys root_cause and solution_steps."
          user = f"""
          Incident: {job.get('incident')}
          Title: {job.get('title')}
          Category: {job.get('category')}
          Opened_by: {job.get('opened_by')}
          Opened_at: {job.get('opened_at')}
          Resolved_at: {job.get('resolved_at')}
          sys_id: {job.get('sys_id')}

          root_cause: {job.get('root_cause')}
          solution_steps: {job.get('solution_steps')}
          """

          client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

          resp = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[{"role":"system","content":system},
                        {"role":"user","content":user}],
              temperature=0.2,
              response_format={"type":"json_object"},
          )
          text = resp.choices[0].message.content or "{}"
          try:
              data = json.loads(text)
          except Exception:
              data = {
                "root_cause": job.get("root_cause",""),
                "solution_steps": job.get("solution_steps","")
              }

          out_path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
          print("Wrote", out_path)
          PY

      - name: Commit result
        run: |
          git config user.name  "docbot"
          git config user.email "docbot@users.noreply.github.com"
          git add ai_jobs/openai_outgoing/*.json
          git commit -m "AI result (OpenAI gpt-4o-mini)" || echo "Nothing to commit"
          git push
